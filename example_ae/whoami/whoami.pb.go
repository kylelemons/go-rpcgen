// Code generated by protoc-gen-go.
// source: whoami.proto
// DO NOT EDIT!

/*
Package whoami is a generated protocol buffer package.

It is generated from these files:
	whoami.proto

It has these top-level messages:
	Empty
	YouAre
*/
package whoami

import proto "github.com/golang/protobuf/proto"
import math "math"

import "net"
import "net/rpc"
import "github.com/bradhe/go-rpcgen/codec"
import "github.com/bradhe/go-rpcgen/client"
import "net/url"
import "net/http"
import "github.com/bradhe/go-rpcgen/webrpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type Empty struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}

type YouAre struct {
	IpAddr           *string `protobuf:"bytes,1,req,name=ip_addr" json:"ip_addr,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *YouAre) Reset()         { *m = YouAre{} }
func (m *YouAre) String() string { return proto.CompactTextString(m) }
func (*YouAre) ProtoMessage()    {}

func (m *YouAre) GetIpAddr() string {
	if m != nil && m.IpAddr != nil {
		return *m.IpAddr
	}
	return ""
}

func init() {
}

// WhoamiService is an interface satisfied by the generated client and
// which must be implemented by the object wrapped by the server.
type WhoamiService interface {
	Whoami(in *Empty, out *YouAre) error
}

// internal wrapper for type-safe RPC calling
type rpcWhoamiServiceClient struct {
	*client.Client
}

func (c rpcWhoamiServiceClient) Whoami(in *Empty, out *YouAre) error {
	return c.Call("WhoamiService.Whoami", in, out)
}

// NewWhoamiServiceClient returns an *rpc.Client wrapper for calling the methods of
// WhoamiService remotely.
func NewWhoamiServiceClient(addr string) WhoamiService {
	return rpcWhoamiServiceClient{client.NewClient(addr)}
}

// ServeWhoamiService serves the given WhoamiService backend implementation on conn.
func ServeWhoamiService(conn net.Conn, backend WhoamiService) error {
	srv := rpc.NewServer()
	if err := srv.RegisterName("WhoamiService", backend); err != nil {
		return err
	}
	srv.ServeCodec(codec.NewServerCodec(conn))
	return nil
}

// ListenAndServeWhoamiService serves the given WhoamiService backend implementation
// on all connections accepted as a result of listening on addr (TCP).
func ListenAndServeWhoamiService(addr string, backend WhoamiService) error {
	clients, err := net.Listen("tcp", addr)
	if err != nil {
		return err
	}
	srv := rpc.NewServer()
	if err := srv.RegisterName("WhoamiService", backend); err != nil {
		return err
	}
	for {
		conn, err := clients.Accept()
		if err != nil {
			return err
		}
		go srv.ServeCodec(codec.NewServerCodec(conn))
	}
	panic("unreachable")
}

// WhoamiServiceWeb is the web-based RPC version of the interface which
// must be implemented by the object wrapped by the webrpc server.
type WhoamiServiceWeb interface {
	Whoami(r *http.Request, in *Empty, out *YouAre) error
}

// internal wrapper for type-safe webrpc calling
type rpcWhoamiServiceWebClient struct {
	remote   *url.URL
	protocol webrpc.Protocol
}

func (this rpcWhoamiServiceWebClient) Whoami(in *Empty, out *YouAre) error {
	return webrpc.Post(this.protocol, this.remote, "/WhoamiService/Whoami", in, out)
}

// Register a WhoamiServiceWeb implementation with the given webrpc ServeMux.
// If mux is nil, the default webrpc.ServeMux is used.
func RegisterWhoamiServiceWeb(this WhoamiServiceWeb, mux webrpc.ServeMux) error {
	if mux == nil {
		mux = webrpc.DefaultServeMux
	}
	if err := mux.Handle("/WhoamiService/Whoami", func(c *webrpc.Call) error {
		in, out := new(Empty), new(YouAre)
		if err := c.ReadRequest(in); err != nil {
			return err
		}
		if err := this.Whoami(c.Request, in, out); err != nil {
			return err
		}
		return c.WriteResponse(out)
	}); err != nil {
		return err
	}
	return nil
}

// NewWhoamiServiceWebClient returns a webrpc wrapper for calling the methods of WhoamiService
// remotely via the web.  The remote URL is the base URL of the webrpc server.
func NewWhoamiServiceWebClient(pro webrpc.Protocol, remote *url.URL) WhoamiService {
	return rpcWhoamiServiceWebClient{remote, pro}
}
